#pragma once

#include <Arduino.h>

static const char config_page[] PROGMEM =
    R"(<!DOCTYPE html><html> <head> <meta content="text/html;charset=UTF-8" http-equiv="content-type" /> <meta name="VIEWPORT" content="width=device-width,initial-scale=1.0" /> <title>Smart Light Sensor</title> <style> *, *::before, *::after { box-sizing: border-box; } body { margin: 0; font-size: medium; font-weight: 400; line-height: 1.5; color: #212529; text-align: left; background-color: #fff; } .tabs { font-size: 0; max-width: 300px; margin-left: auto; margin-right: auto; } .tabs > input[type="radio"] { display: none; } .tabs > div { /*скрыть контент по умолчанию*/ display: none; border: 2px solid #e0e0e0; padding: 10px 15px; font-size: medium; } .tabs > h3 { font-size: x-large; } /*отобразить контент,связанный с выбранной радиокнопкой(input type='radio')*/ #tab-btn-1:checked ~ #content-1, #tab-btn-2:checked ~ #content-2 { display: block; } .tabs > label { display: inline-block; text-align: center; vertical-align: middle; user-select: none; background-color: #f5f5f5; border: 1px solid #e0e0e0; padding: 2px 8px; font-size: medium; line-height: 1.5; transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out; cursor: pointer; position: relative; top: 1px; } .tabs > label:not(:first-of-type) { border-left: none; } .tabs > input[type="radio"]:checked + label { background-color: #cfcfcf; border-bottom: 1px solid #fff; } label { margin-left: 10px; margin-bottom: 3px; } input { margin-left: 10px; margin-bottom: 3px; margin-right: 7px; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; -ms-box-sizing: content-box; box-sizing: content-box; } input[type="text"], input[type="password"], input[type="range"] { display: block; width: 250px; } .cansel_btn { margin: 15px 10px; width: 100px; } .save_btn { margin: 15px 10px; width: 100px; margin-left: 20px; } .hint { font-size: small; text-align: justify; margin-left: 0px; margin-bottom: 0px; line-height: 0; color: #0000ff; } </style> </head> <body> <form> <div class="tabs"> <h3>Smart Light Sensor</h3> <input type="radio" name="tab-btn" id="tab-btn-1" value="" checked /><label for="tab-btn-1">Настройки модуля</label ><input type="radio" name="tab-btn" id="tab-btn-2" value="" /><label for="tab-btn-2" >Настройки WiFi</label > <div id="content-1"> <h4>Настройки датчика освещенности</h4> <label>Порог переключения (%) - </label ><label id="l_threshold">11</label><br /><input type="range" name="threshold" id="threshold" max="100" min="10" value="0" oninput="document.getElementById('l_threshold').innerHTML = this.value; enableBtnSave();" /><label class="hint" >Установка порога срабатывания датчика освещенности</label ><br /><br /> <label>Задержка переключения (сек.) - </label ><label id="l_lb_shutown_delay">11 </label><br /><input type="range" name="lb_shutown_delay" id="lb_shutown_delay" max="60" min="10" value="0" oninput="document.getElementById('l_lb_shutown_delay').innerHTML = this.value; enableBtnSave();" /><label class="hint" >Установка задержки выключения ближнего света при превышении порога датчика освещенности. Включение ближнего света ниже порога всегда происходит сразу</label ><br /><br /> <hr /> <h4>Настройки питания</h4> <label>Задержка включения (сек.) - </label ><label id="l_turn_on_delay">11 </label><br /><input type="range" name="turn_on_delay" id="turn_on_delay" max="10" min="0" value="0" oninput="document.getElementById('l_turn_on_delay').innerHTML = this.value; enableBtnSave();" /><label class="hint" >Установка задержки включения головного света после запуска двигателя</label ><br /><br /> <label>Задержка выключения (сек.) - </label ><label id="l_run_sleep_delay">11 </label><br /><input type="range" name="run_sleep_delay" id="run_sleep_delay" max="60" min="0" value="0" oninput="document.getElementById('l_run_sleep_delay').innerHTML = this.value; enableBtnSave();" /><label class="hint" >Установка задержки ухода модуля в сон после выключения зажигания</label ><br /><br /> <hr /> <br /> <label>Яркость светодиода (%) - </label ><label id="l_led_br">11 </label><br /><input type="range" name="led_br" id="led_br" max="10" min="1" value="0" oninput="document.getElementById('l_led_br').innerHTML = this.value*10; enableBtnSave(); setLedBr();" /><label class="hint" >Установить уровень яркости индикаторного светодиода. Установка влияет как на максимальный, так и на минимальный уровень.</label ><br /><br /> </div> <div id="content-2"> <h4>Точка доступа модуля</h4> <label>Имя точки доступа (SSID)</label><br /><input type="text" name="ap_ssid" id="ap_ssid" placeholder="SSID точки доступа" oninput="enableBtnSave();" /><label>Пароль</label><br /><input type="text" name="ap_pass" id="ap_pass" placeholder="пароль точки доступа" oninput="enableBtnSave();" /><br /><label>IP-адрес</label><br /><input type="text" minlength="7" maxlength="15" size="15" id="ap_ip" oninput="enableBtnSave();" /><br /> </div> <input type="button" value="Сбросить" id="btn_cansel" class="cansel_btn" onclick="if(confirm('Отменить все внесенные изменения?')){location.reload();}" disabled /><input type="button" id="btn_save" class="save_btn" value="Сохранить" onclick='sendData()' disabled /> </div> </form> <script> function checkSsidValue(i_id, is_empty) { var tag = document.getElementById(i_id); if (is_empty && tag.value.length == 0) { return true; } var res = tag.value.length > 0 && tag.value.length <= 32; if (!res) { tag.focus(); showErrorPage(i_id); alert( "Длина SSID должна быть не менее 1 и не более 32 символов! \n\n Разрешенные символы:0..9, A..Z, a..z, - , _" ); } return res; } function checkPassValue(i_id, is_empty) { var tag = document.getElementById(i_id); if (is_empty && tag.value.length == 0) { return true; } var res = tag.value.length >= 8 && tag.value.length <= 64; if (!res) { tag.focus(); showErrorPage(i_id); alert( "Длина пароля должна быть не менее 8 и не более 64 символов! \n\n Не разрешаются символы кириллицы и пробелы" ); } return res; } function ipAddressCheck(i_id) { var tag = document.getElementById(i_id); var regEx = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/; if (tag.value.match(regEx)) { return true; } else { tag.focus(); showErrorPage(i_id); alert( "Неправильно введен IP адрес!\n\n IP адрес должен иметь вид XXX.XXX.XXX.XXX \n\n где XXX - число в интервале 0..255" ); return false; } } function validate_form() { var res = checkSsidValue("ap_ssid", false); if (res) { res = checkPassValue("ap_pass", true); if (res) { res = ipAddressCheck("ap_ip"); } } return res; } function showErrorPage(id) { if (id == "ap_ssid" || id == "ap_pass" || id == "ap_ip") { document.getElementById("tab-btn-2").checked = true; } document.getElementById(id).focus(); } function enableBtnSave() { document.getElementById("btn_save").removeAttribute("disabled"); document.getElementById("btn_cansel").removeAttribute("disabled"); } function sendData() { var res = validate_form(); if (res) { document.getElementById("btn_save").disabled = "disabled"; let form_data = { ap_ssid: document.getElementById("ap_ssid").value, ap_pass: document.getElementById("ap_pass").value, ap_ip: document.getElementById("ap_ip").value, threshold: document.getElementById("threshold").value, turn_on_delay: document.getElementById("turn_on_delay").value, run_sleep_delay: document.getElementById("run_sleep_delay").value, lb_shutown_delay: document.getElementById("lb_shutown_delay").value, led_br: document.getElementById("led_br").value, }; var xhr = new XMLHttpRequest(); xhr.open("POST", "/_setconfig", true); xhr.setRequestHeader("Content-Type", "text/json"); xhr.onreadystatechange = function () { document.body.innerHTML = this.responseText; }; xhr.send(JSON.stringify(form_data)); } return res; } function getConfig() { var request = new XMLHttpRequest(); request.open("GET", "/_getconfig", true); request.onload = function () { if (request.readyState == 4 && request.status == 200) { var config_str = request.responseText; var doc = JSON.parse(config_str); document .getElementById("ap_ssid") .setAttribute("value", doc.ap_ssid); document .getElementById("ap_pass") .setAttribute("value", doc.ap_pass); document.getElementById("ap_ip").setAttribute("value", doc.ap_ip); var el = document.getElementById("threshold"); el.setAttribute("value", doc.threshold); document.getElementById("l_threshold").innerHTML = doc.threshold; el = document.getElementById("turn_on_delay"); el.setAttribute("value", doc.turn_on_delay); el.setAttribute("max", doc.max_turn_on_delay); document.getElementById("l_turn_on_delay").innerHTML = doc.turn_on_delay; el = document.getElementById("run_sleep_delay"); el.setAttribute("value", doc.run_sleep_delay); el.setAttribute("max", doc.max_run_sleep_delay); document.getElementById("l_run_sleep_delay").innerHTML = doc.run_sleep_delay; el = document.getElementById("lb_shutown_delay"); el.setAttribute("value", doc.lb_shutown_delay); el.setAttribute("max", doc.max_lb_shutown_delay); el.setAttribute("min", doc.min_lb_shutown_delay); document.getElementById("l_lb_shutown_delay").innerHTML = doc.lb_shutown_delay; document.getElementById("led_br").setAttribute("value", doc.led_br); document.getElementById("l_led_br").innerHTML = doc.led_br*10; } }; request.send(); } function setLedBr() { let led_br = { led_br: document.getElementById("led_br").value, }; var xhr = new XMLHttpRequest(); xhr.open("POST", "/_ledbrightness", true); xhr.setRequestHeader("Content-Type", "text/json"); xhr.send(JSON.stringify(led_br)); } function keyUpBySsid() { this.value = this.value.replace(/[^a-zA-Z0-9_/-]/g, ""); } function keyUpByPass() { this.value = this.value.replace(/[А-Яа-яёЁ/ ]/g, ""); } function keyUpByIP() { this.value = this.value.replace(/[^0-9.]/g, ""); } document.getElementById("ap_ssid").addEventListener("keyup", keyUpBySsid); document.getElementById("ap_pass").addEventListener("keyup", keyUpByPass); document.getElementById("ap_ip").addEventListener("keyup", keyUpByIP); document.addEventListener("DOMContentLoaded", getConfig); </script> </body></html>)";
